type: edu
custom_name: stage6
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-alg", "unicode",
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-alg", "unicode",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-alg", "unicode",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-alg", "unicode",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-alg", "unicode",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-alg", "unicode",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("bjqhtrj yt mdujwxpnqq")
                    .addFile("input.txt", "welcome to hyperskill"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("treasure")
                    .addFile("input.txt", "dbokcebo"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "12",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("cphpchdjcijdjibhdjebhjucspucmdmudbnuccup")
                    .addFile("input.txt", "qdvdqvrxqwxrxwpvrxspvxiqgdiqarairpbiqqid"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("y")
                    .addFile("input.txt", "i"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "10",
                        "-in", "input.txt",
                        "-alg", "shift",
                        "-out", "output.txt"
                    )
                    .setAttach("i")
                    .addFile("input.txt", "y")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }

    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |
    package encryptdecrypt;

    import java.io.File;
    import java.io.FileWriter;
    import java.io.PrintWriter;
    import java.io.Writer;
    import java.util.Objects;
    import java.util.Scanner;

    public class Main {
        public static String encrypt(String message, int key) {
            StringBuilder encrypted = new StringBuilder();

            for (char letter : message.toCharArray()) {
                char newLetter = (char) ((int) letter + key);

                encrypted.append(newLetter);
            }

            return encrypted.toString();
        }

        public static String decrypt(String message, int key) {
            StringBuilder decrypted = new StringBuilder();

            for (char letter : message.toCharArray()) {
                char newLetter = (char) ((int) letter - key);

                decrypted.append(newLetter);
            }

            return decrypted.toString();
        }

        public static void main(String[] args) {
            String mode = "enc";
            String data = "";
            int key = 0;
            String fileToRead = "";
            String outputFile = "";
            String result = "";

            try {
                for (int i = 0; i < args.length; i++) {
                    if (Objects.equals(args[i], "-mode")) {
                        mode = args[i + 1];
                        continue;
                    }
                    if (Objects.equals(args[i], "-key")) {
                        key = Integer.parseInt(args[i + 1]);
                        continue;
                    }
                    if (Objects.equals(args[i], "-data")) {
                        data = args[i + 1];
                        continue;
                    }
                    if (Objects.equals(args[i], "-in")) {
                        fileToRead = args[i + 1];
                        continue;
                    }
                    if (Objects.equals(args[i], "-out")) {
                        outputFile = args[i + 1];
                    }
                }

                switch (mode) {
                    case "enc":
                        if (!(data.equals(""))) {
                            result = encrypt(data, key);
                        } else if (!(fileToRead.equals(""))) {
                            File file = new File(fileToRead);
                            Scanner scanner = new Scanner(file);
                            String input = "";

                            while (scanner.hasNext()) {
                                input += scanner.nextLine();
                            }

                            result = encrypt(input, key);
                        }
                        break;
                    case "dec":
                        if (!(data.equals(""))) {
                            result = decrypt(data, key);
                        } else if (!(fileToRead.equals(""))) {
                            File file = new File(fileToRead);
                            Scanner scanner = new Scanner(file);
                            String input = "";

                            while (scanner.hasNext()) {
                                input += scanner.nextLine();
                            }

                            result = decrypt(input, key);
                        }
                        break;
                    default:
                        result = "Unsupported command";
                }

                if (outputFile.equals("")) {
                    System.out.println(result);
                } else {
                    File file = new File(outputFile);
                    PrintWriter writer = new PrintWriter(file);

                    writer.append(result);
                    writer.close();
                }

            } catch (Exception e) {
                System.out.println("Error: " + e.getMessage());
            }
        }
    }
  learner_created: true
- name: output.txt
  visible: true
  text: 111122223333
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/250/implement
status: Solved
record: -1
